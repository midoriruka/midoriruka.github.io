{"meta":{"title":"Sijt's blog","subtitle":"I'm a beauty.","description":"start from zero","author":"Sijt","url":"https://midoriruka.github.io"},"pages":[{"title":"tags","date":"2018-01-03T13:48:17.000Z","updated":"2018-01-03T13:49:32.048Z","comments":false,"path":"tags/index.html","permalink":"https://midoriruka.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-01-03T13:48:33.000Z","updated":"2018-01-03T13:50:09.536Z","comments":false,"path":"categories/index.html","permalink":"https://midoriruka.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"Python学习笔记（2）","date":"2017-09-25T15:20:39.478Z","updated":"2017-09-25T15:21:03.008Z","comments":true,"path":"2017/09/25/Python学习笔记（2）/","link":"","permalink":"https://midoriruka.github.io/2017/09/25/Python学习笔记（2）/","excerpt":"","text":"###Python学习笔记（2） ####Python函数 可以重复调用的代码段，学过其他语言的应该都很清楚 定义格式： 不带参数： def print_hello(): print &quot;hello&quot; 调用： print_hello() 带参数： 。。。（不一一记录，跟其他语言差不多） 带默认参数的： 。。。 不定长参数： def print_args(a,*args): print a for s in args print s return 参数次序可以变： 。。。 python类简介面向对象即class ，类 。一个是类，一个是类实例，通俗讲人类就是一个类，每个人就是一个实例，人类又是哺乳动物，是动物的子类，这就是面向对象中继承的概念。动物会自带一些属性，一些属性相同，但是子类可能有其他特有的属性和方法。 定义用class去定义一个类，如果没有指定父类，默认继承object类。 class Human(object): pass 这样定义了一个类，即Human 类属性所有类都有的，并不是某个实例特有的，是与类绑定的，不是和实例绑定的，比如胎生是人类都有的属性，并不是某个人特有的 class Human(object): taisheng=True 实例属性class Human(object): def __init__(self,name);（构造函数，相当于初始化） self.name=name Human_a=Human(&quot;sijt&quot;)(实例化) name属性 独立于人类，是Human_a这个人特有的 ，与实例绑定的，所以叫实例属性，实例属性相对于每个实例是不一样的 class Human(object): pass Human_a=Human() Human_a.name=&apos;a&apos; Human_b.name=&apos;b&apos; (a的名字和b的名字不一样的，是实例属性) 实例属性可以在实例创建后任意时间设定 一般放在构造函数_ init _里 类方法类方法可以看做一种类属性，第一个参数是self，表示调用这个类方法的实例 class Human(object): def __init__(self,name): self.name=name def walk(self): print self.name+&quot;is walking&quot; human_a = Human(&quot;alan&quot;) human_a.walk() 访问控制将name这个属性设为私有，前面加两个下划线 ，还是想访问的话，加个get接口 class Human(object): def __init__(self,name): self.__name=name def walk(self): print self.name+&quot;is walking&quot; def get_name(self): return self.__name human_a = Human(&quot;alan&quot;) human_a.get_name() human_a.__name 如果想改这个属性，要加set接口 class Human(object): def __init__(self,name): self.__name=name def walk(self): print self.name+&quot;is walking&quot; def get_name(self): return self.__name def set_name(self,name): self.__name=name human_a=Human(&quot;a&quot;) print human_a.set_name(&quot;b&quot;) 这么写并不是画蛇添足，可以保护属性，直接属性外露可能带来意想不到的后果，可以通过加接口的方式加以控制，比如可以控制name的长 class Human(object): def __init__(self,name): self.__name=name def walk(self): print self.name+&quot;is walking&quot; def get_name(self): return self.__name def set_name(self,name): if(len(name&lt;=18)) self.__name=name human_a=Human(&quot;a&quot;) print human_a.set_name(&quot;b&quot;)","categories":[],"tags":[]},{"title":"","slug":"python学习笔记","date":"2017-09-19T13:59:37.168Z","updated":"2017-09-20T14:25:10.876Z","comments":true,"path":"2017/09/19/python学习笔记/","link":"","permalink":"https://midoriruka.github.io/2017/09/19/python学习笔记/","excerpt":"","text":"Python学习笔记（1）============================ 主要是看的雨敲窗的视频，视频传送门：（点击此处） Python变量python不用事先声明变量，赋值过程中就包含了变量声明和定义的过程用“=”赋值，左边的是变量名，右边是变量的值 1.数字： 整数：int_var=1长整数：long_var=1000L浮点型：float_var=1.0复数：用的不多，需要时可自行查资料。 a=1 b=1000L c=1.0 print a print b print c 2.字符串： str=&apos;Hello World!&apos; print str #输出完整的字符 print str[0] #输出字符串中的第一个字符 print str[2:5] #输出字符串中第三个至第五个之间的字符（左闭右开原则） print str[2:] #输出从第三个字符开始一直到最后的字符串 print str*2 #输出字符串两次 print str+&quot;TEST&quot; #输出连接的字符串（即加上+后面的字符串） 3.列表： list_a=[&quot;str&quot;,1,[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],4] list_b=[&quot;hello&quot;] print list_a[0]....同字符串类似 print list_a + list 4.元组：可以视为不可变列表，在赋值后不可二次更改了 tuple_a=[&quot;str&quot;,1,[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],4] tuple_b=[&quot;hello&quot;] print tuple_a[0]....同字符串类似 print tuple_a + tuple_b 5.字典：类似于c++语言的Map，key-value键值对的集合，无序的容器 dict_a={ &quot;name&quot;:&quot;sjt&quot;,#冒号左边是key,右边是value &quot;age&quot;:24, 1:&quot;level_1&quot; } print dict_a[&quot;name&quot;] print dict_a[&quot;age&quot;] print dict_a[1] print &quot;name&quot; in dict_a #输出true print &quot;xxx&quot; in dict_a #输出false print dict_a.keys() print dict_a.values() print dict_a.items() #items会输出字典中所有的元素，包括keys和values python运算符 算术运算符：+，-，，/，%（取模），**（幂），//（整除）比较运算符：==，!=(&lt;&gt;不等于)，&gt;,&lt;,&gt;=，&lt;=,赋值运算符：=(赋值),+=(a+=b相当于a=a+b),-=,=,/=,%=,**=,//=逻辑运算符：and（与），or（或），not（非）成员运算符：in,not in(判断是否在指定容器中，返回true或false)身份运算符：is，not is（判断两个变量是否引用自同一个对象，返回true或false）位运算符：&amp;（与），|（或），^（异或），~（取反），&lt;&lt;(左移),&gt;&gt;（右移） python语句1.if语句 a=1 if a==1; print &quot;a==1&quot; else: print &quot;a!=1&quot; 2.for语句：用来遍历容器，或者执行重复性代码 遍历容器：list_a=[1,2,3] for i in list_a; print i 执行重复性代码：for i in range(0,10); print i while语句：a=1 while a!=10; print a a +=1 break语句：直接跳出循环for i in range(0,10); for j in range(0,10); print i,j if j==5; break continua语句：直接进入下一个循环list_a=[1,2,3] for i in list_a; print i if i==2; continue print &quot;~~&quot; Python中几种常见的容器（数据结构）1.list:python内置的一种数据结构；有序；可更改（添加、删除）game=[&quot;wangzherongyao&quot;,&quot;yingyangshi&quot;,&quot;lol&quot;] #声明 len(game) #获取长度 game[0] #获取元素 list增加元素：（1）末尾增加： game.append(&quot;wow&quot;) （2）指定位置插入： game.insert(2,&quot;wow&quot;) list删除元素：（1）删除末尾元素： game.pop() （2）删除指定位置元素： game.pop(1) 2.tuple元组：内置的一种数据结构，有序，不可更改，赋值时决定所有元素game=(&quot;wangzherongyao&quot;,&quot;yingyangshi&quot;,&quot;lol&quot;) #声明 len(game) #获取长度 game[0] #获取元素 3.dict字典：内置的一种数据结构；无序；可更改 name={1:&quot;a&quot;;2:&quot;b&quot;;3:&quot;c&quot;;4:&quot;d&quot;} #声明 name[1] #查找 （结果：&apos;a&apos;） 5 in name #确定5这个key是否在name中（结果:false） name.get(5) #测试5是否在name中，不在会返回none name[5]=&quot;e&quot; #加一条记录 name.pop(1) #删除 len(name) #元素个数 name.keys() #获取所有key name。values() #获取所有的values name.item() #获取所有的键值对 4.set:内置数据结构；无序；可更改，set可以视为没有values的dict，只有key，一般用作去重或者集合求交/合并等。a=set([&apos;lucy&apos;,&apos;lily&apos;]) b=set([&apos;lily&apos;,&apos;anna&apos;]) #声明 a &amp; b #求并 （结果:set([&apos;lily&apos;])） a | b #求交 （结果:set([&apos;lucy&apos;,&apos;lily&apos;,&apos;anna&apos;])） a.add(&apos;marry&apos;) #增加 a.remove(&apos;lucy&apos;) #删除","categories":[],"tags":[]}]}