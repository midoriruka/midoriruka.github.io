{"meta":{"title":"Sijt's blog","subtitle":"I'm a beauty.","description":"start from zero","author":"Sijt","url":"https://midoriruka.github.io"},"pages":[{"title":"categories","date":"2018-01-21T08:04:35.000Z","updated":"2018-01-21T08:07:23.924Z","comments":true,"path":"categories/index.html","permalink":"https://midoriruka.github.io/categories/index.html","excerpt":"","text":""},{"title":"All tags","date":"2018-01-21T04:39:04.000Z","updated":"2018-01-21T07:58:47.624Z","comments":true,"path":"tags/index.html","permalink":"https://midoriruka.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"BootStrap学习笔记","date":"2018-01-23T16:00:53.204Z","updated":"2018-01-23T16:00:55.916Z","comments":true,"path":"2018/01/24/BootStrap学习笔记/","link":"","permalink":"https://midoriruka.github.io/2018/01/24/BootStrap学习笔记/","excerpt":"","text":"BootStrap学习笔记一、 环境搭建 特性：响应式布局、栅格布局、完整的类库、jQuery插件等可视化开发工具：jetstrap官方地址：https://getbootstrap.com/中文网：http://www.bootcss.com/ 搭建网页需要引入：123&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;dist/css/bootstrap.min.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;dist/js/bootstrap.min.js&quot;&gt;&gt;&lt;/script&gt; 二、 BootStrap全局样式1.标题（h1~h6 / .h1 ~ .h6） 副标题（smal）12345&lt;span class=&quot;h1&quot;&gt;标题一&lt;/span&gt;（内联元素使用h1标题，其余标题依次类推）&lt;h1&gt;标题一&lt;small&gt;小标题&lt;/small&gt;&lt;/h1&gt;（大标题包围小标题） 2.排版（文本） 对齐： .text-left/ .text-center /.text-right 大小写：.text-lowercase/.text-uppercase/.text-capitalize 标注：&lt;mark&gt;sss&lt;/mark&gt; 删除:&lt;del&gt;&lt;/del&gt; 插入:&lt;ins&gt;&lt;/ins&gt; 3.表格 带边框的表格：.table-borded 条纹状表格：.table-striped 悬停变色：.table-hover 紧凑风格：.table-condensed 加颜色：danger info warning等 4.表单 form-group form-control form-inline 等等 5.按钮 btn/btn-default… btn-sucess/btn-warning/btn-info… btn-link 等等 6.图片 圆角：.img-rounded-圆形： .img-circle-带有边框的圆角： .img-thumbnail 7.辅助类 文本颜色 背景颜色 状态设置 三角符号 三、viewportmete标签中的viewport width、height user-scalable、initial-scale maximum-scale、minimum-scale 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no&quot;&gt; 四、栅格系统响应式网页特点： 视野开阔多变、信息丰富 排版新颖随意、利于设计师设计 适用于pc端和手机端 例子：屏幕大于500px，小于900px时显示的样式，可以写在这里123456789&lt;style type=&quot;text/css&quot;&gt;@media screen and (max-width: 900px) and (min-width: 500px)&#123; div&#123; width: 100%; height: 100px; background: green; &#125; &#125; &lt;/style&gt; 媒体查询:在栅格系统中，在 Less 文件中使用以下媒体查询（media query）来创建关键的分界点阈值1234567891011/* 超小屏幕（手机，小于 768px） *//* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） *//* 小屏幕（平板，大于等于 768px） */@media (min-width: @screen-sm-min) &#123; ... &#125;/* 中等屏幕（桌面显示器，大于等于 992px） */@media (min-width: @screen-md-min) &#123; ... &#125;/* 大屏幕（大桌面显示器，大于等于 1200px） */@media (min-width: @screen-lg-min) &#123; ... &#125; 偶尔也会在媒体查询代码中包含 max-width 从而将 CSS 的影响限制在更小范围的屏幕大小之内1234@media (max-width: @screen-xs-max) &#123; ... &#125;@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) &#123; ... &#125;@media (min-width: @screen-md-min) and (max-width: @screen-md-max) &#123; ... &#125;@media (min-width: @screen-lg-min) &#123; ... &#125; 栅格参数：https://v3.bootcss.com/css/#grid-options实例：从堆叠到水平排列：https://v3.bootcss.com/css/#grid-example-basic 具体参考bootstrap中文网：https://v3.bootcss.com/css/ 五、网页开发中的单位 px ：屏幕分辨率中的最小单位 em：文本的字体尺寸 rem：与em类似，html根节点的字体单位 六、图标例子：123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;标题&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;dist/css/bootstrap.min.css&quot;&gt; &lt;style type=&quot;text/css&quot;&gt; .glyphicon-heart &#123; color: red; font-size: 100px; &#125; &lt;/style&gt; &lt;/head&gt;&lt;body&gt; &lt;span class=&quot;glyphicon glyphicon-heart&quot;&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 图标类名可去：https://v3.bootcss.com/components/ 里面找 七、bootstap组件 sublim中标签*n+tab键=创建n个相同的标签 1.下拉菜单：1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;标题&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;dist/css/bootstrap.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery/dist/jquery.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;dropdown&quot;&gt; &lt;button class=&quot;btn btn-default dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt; 这是按钮 &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;ul class=&quot;dropdown-menu&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://www.youzhan.org/&quot;&gt;bootstrap优站精选&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://www.jekyll.com.cn/&quot;&gt;Jekyll中文网&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://www.ghostchina.com/&quot;&gt;Ghost中文网&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2.控件组123456&lt;body&gt; &lt;div class=&quot;input-group&quot;&gt; &lt;span class=&quot;input-group-addon&quot;&gt;$&lt;/span&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt; &lt;/div&gt; &lt;/body&gt; 3.导航1234567891011&lt;ul class=&quot;nav nav-tabs&quot;&gt; &lt;li class=&quot;active&quot;&gt; &lt;a href=&quot;http://www.youzhan.org/&quot;&gt;bootstrap优站精选&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://www.jekyll.com.cn/&quot;&gt;Jekyll中文网&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://www.ghostchina.com/&quot;&gt;Ghost中文网&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; 胶囊式：1234567891011&lt;ul class=&quot;nav nav-pills nav-stacked&quot;&gt; &lt;li class=&quot;active&quot;&gt; &lt;a href=&quot;http://www.youzhan.org/&quot;&gt;bootstrap优站精选&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://www.jekyll.com.cn/&quot;&gt;Jekyll中文网&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://www.ghostchina.com/&quot;&gt;Ghost中文网&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; 等等。。。 4.分页1234567891011121314151617181920212223&lt;body&gt; &lt;nav&gt; &lt;ul class=&quot;pager&quot;&gt; &lt;li class=&quot;previous&quot;&gt; &lt;a href=&quot;http://www.youzhan.org/&quot;&gt;left&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;next&quot;&gt; &lt;a href=&quot;http://www.youzhan.org/&quot;&gt;right&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;pagination pagination-lg&quot;&gt; &lt;li class=&quot;active&quot;&gt; &lt;a href=&quot;http://www.youzhan.org/&quot;&gt;1&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://www.jekyll.com.cn/&quot;&gt;2&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://www.ghostchina.com/&quot;&gt;3&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;&lt;/body&gt; 5.进度条12345&lt;div class=&quot;progress&quot;&gt; &lt;div class=&quot;progress-bar progress-bar-warning&quot; style=&quot;width: 60%&quot;&gt; %60 &lt;/div&gt; &lt;/div&gt; 6 .列表123456789101112131415161718&lt;ul class=&quot;list-group&quot;&gt; &lt;li class=&quot;list-group-item active&quot;&gt; 这是一个列表 &lt;span class=&quot;badge&quot;&gt; 14 &lt;/span&gt; &lt;li class=&quot;list-group-item disabled&quot;&gt; 这是一个列表 &lt;span class=&quot;badge&quot;&gt; 24 &lt;/span&gt; &lt;li class=&quot;list-group-item&quot;&gt; 这是一个列表 &lt;span class=&quot;badge&quot;&gt; 13 &lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; 7.面板1234567891011&lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; 弹出层！ &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; 具体内容！ &lt;/div&gt; &lt;div class=&quot;panel-footer&quot;&gt; 脚部信息！ &lt;/div&gt; &lt;/div&gt;","categories":[],"tags":[]},{"title":"Hexo的next主题配置记录","slug":"Hexo的next主题配置记录","date":"2018-01-21T08:55:31.000Z","updated":"2018-01-21T09:54:31.926Z","comments":true,"path":"2018/01/21/Hexo的next主题配置记录/","link":"","permalink":"https://midoriruka.github.io/2018/01/21/Hexo的next主题配置记录/","excerpt":"","text":"使用next主题的hexo博客 之前尝试了几种高分主题，都不尽如意，看到了这个主题的一个博客，觉得很好用，并且有详细的搭建指导，决定试用一下。 1.安装首先当然是安装hexo（依据官方文档）：https://hexo.io/docs/，安装好之后，有了自己的博客之后就可以选择next主题了，接下来是使用next主题的记录 在终端切换到hexo 根目录（我用的是git bash）,并下载next主题（我用的克隆库） 123$ cd hexo$ mkdir themes/next$ git clone https://github.com/iissnan/hexo-theme-next themes/next 在 hexo 根目录下 的配置文件_config.yml里设置主题: 1theme: next 2.更新12$ cd themes/next$ git pull 这样就安装并更新好了，现在来部署下看下blog变化 3.部署更新123$ hexo g$ hexo d$ hexo s 这样服务启好了就可以打开浏览器，发现blog已经换成next主题了~ 4.配置主题部署好了之后就可以配置属于自己的主题了在站点配置文件_config.yml中可以将语言切换成中文1language: zh-Hans 主题配置文件 _config.yml下加以下打开多说123duoshuo: enable: true shortname: your-duoshuo-shortname 添加标签页 在hexo目录下新建： 1$ hexo new page &quot;tags&quot; 编辑标签页 123title: All tagsdate: 2014-12-22 12:39:04type: &quot;tags&quot; 添加 tags 到主题配置文件 _config.yml 里 1234menu: home: / archives: /archives tags: /tags 添加一个分类页面 在hexo目录下新建分类文件 1$ hexo new page &quot;categories&quot; 编辑分类页 123title: categoriesdate: 2018-01-21 16:04:35type: &quot;categories&quot; 添加 categories 到主题配置文件 _config.yml 里 1234menu: home: / archives: /archives categories: /categories 添加社交媒体123456social: GitHub: your-github-url Twitter: your-twitter-url Weibo: your-weibo-url DouBan: your-douban-url ZhiHu: your-zhihu-url 接下来就是配置一些显示的内容，可以按照自己的具体内容修改123456789101112131415161718192021# Menu configuration.menu: home: / archives: /archives# Faviconfavicon: /favicon.ico# Avatar (put the image into next/source/images/)# can be any image format supported by web browsers (JPEG,PNG,GIF,SVG,..)avatar: /default_avatar.png# Code highlight theme# available: normal | night | night eighties | night blue | night brighthighlight_theme: normal# Fancybox for image galleryfancybox: true# Specify the date when the site was setupsince: 2013 配置好了再部署下就ok了","categories":[],"tags":[{"name":"next","slug":"next","permalink":"https://midoriruka.github.io/tags/next/"}]},{"title":"Python学习笔记(一)","slug":"python学习笔记","date":"2018-01-21T08:55:31.000Z","updated":"2018-01-21T09:28:28.183Z","comments":true,"path":"2018/01/21/python学习笔记/","link":"","permalink":"https://midoriruka.github.io/2018/01/21/python学习笔记/","excerpt":"","text":"Python学习笔记 主要是看的雨敲窗的视频，视频传送门：（点击此处） Python变量 python不用事先声明变量，赋值过程中就包含了变量声明和定义的过程用“=”赋值，左边的是变量名，右边是变量的值 1.数字： 整数：int_var=1长整数：long_var=1000L浮点型：float_var=1.0复数：用的不多，需要时可自行查资料。 a=1 b=1000L c=1.0 print a print b print c 2.字符串： str=&apos;Hello World!&apos; print str #输出完整的字符 print str[0] #输出字符串中的第一个字符 print str[2:5] #输出字符串中第三个至第五个之间的字符（左闭右开原则） print str[2:] #输出从第三个字符开始一直到最后的字符串 print str*2 #输出字符串两次 print str+&quot;TEST&quot; #输出连接的字符串（即加上+后面的字符串） 3.列表： list_a=[&quot;str&quot;,1,[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],4] list_b=[&quot;hello&quot;] print list_a[0]....同字符串类似 print list_a + list 4.元组：可以视为不可变列表，在赋值后不可二次更改了 tuple_a=[&quot;str&quot;,1,[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],4] tuple_b=[&quot;hello&quot;] print tuple_a[0]....同字符串类似 print tuple_a + tuple_b 5.字典：类似于c++语言的Map，key-value键值对的集合，无序的容器 dict_a={ &quot;name&quot;:&quot;sjt&quot;,#冒号左边是key,右边是value &quot;age&quot;:24, 1:&quot;level_1&quot; } print dict_a[&quot;name&quot;] print dict_a[&quot;age&quot;] print dict_a[1] print &quot;name&quot; in dict_a #输出true print &quot;xxx&quot; in dict_a #输出false print dict_a.keys() print dict_a.values() print dict_a.items() #items会输出字典中所有的元素，包括keys和values python运算符 算术运算符：+，-，，/，%（取模），**（幂），//（整除）比较运算符：==，!=(&lt;&gt;不等于)，&gt;,&lt;,&gt;=，&lt;=,赋值运算符：=(赋值),+=(a+=b相当于a=a+b),-=,=,/=,%=,**=,//=逻辑运算符：and（与），or（或），not（非）成员运算符：in,not in(判断是否在指定容器中，返回true或false)身份运算符：is，not is（判断两个变量是否引用自同一个对象，返回true或false）位运算符：&amp;（与），|（或），^（异或），~（取反），&lt;&lt;(左移),&gt;&gt;（右移） python语句1.if语句 a=1 if a==1; print &quot;a==1&quot; else: print &quot;a!=1&quot; 2.for语句：用来遍历容器，或者执行重复性代码 遍历容器：list_a=[1,2,3] for i in list_a; print i 执行重复性代码：for i in range(0,10); print i while语句：a=1 while a!=10; print a a +=1 break语句：直接跳出循环for i in range(0,10); for j in range(0,10); print i,j if j==5; break continua语句：直接进入下一个循环list_a=[1,2,3] for i in list_a; print i if i==2; continue print &quot;~~&quot; Python中几种常见的容器（数据结构）1.list:python内置的一种数据结构；有序；可更改（添加、删除）game=[&quot;wangzherongyao&quot;,&quot;yingyangshi&quot;,&quot;lol&quot;] #声明 len(game) #获取长度 game[0] #获取元素 list增加元素：（1）末尾增加： game.append(&quot;wow&quot;) （2）指定位置插入： game.insert(2,&quot;wow&quot;) list删除元素：（1）删除末尾元素： game.pop() （2）删除指定位置元素： game.pop(1) 2.tuple元组：内置的一种数据结构，有序，不可更改，赋值时决定所有元素game=(&quot;wangzherongyao&quot;,&quot;yingyangshi&quot;,&quot;lol&quot;) #声明 len(game) #获取长度 game[0] #获取元素 3.dict字典：内置的一种数据结构；无序；可更改 name={1:&quot;a&quot;;2:&quot;b&quot;;3:&quot;c&quot;;4:&quot;d&quot;} #声明 name[1] #查找 （结果：&apos;a&apos;） 5 in name #确定5这个key是否在name中（结果:false） name.get(5) #测试5是否在name中，不在会返回none name[5]=&quot;e&quot; #加一条记录 name.pop(1) #删除 len(name) #元素个数 name.keys() #获取所有key name。values() #获取所有的values name.item() #获取所有的键值对 4.set:内置数据结构；无序；可更改，set可以视为没有values的dict，只有key，一般用作去重或者集合求交/合并等。a=set([&apos;lucy&apos;,&apos;lily&apos;]) b=set([&apos;lily&apos;,&apos;anna&apos;]) #声明 a &amp; b #求并 （结果:set([&apos;lily&apos;])） a | b #求交 （结果:set([&apos;lucy&apos;,&apos;lily&apos;,&apos;anna&apos;])） a.add(&apos;marry&apos;) #增加 a.remove(&apos;lucy&apos;) #删除","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://midoriruka.github.io/tags/python/"}]},{"title":"Python学习笔记(二)","slug":"Python学习笔记（2）","date":"2018-01-21T08:55:31.000Z","updated":"2018-01-21T09:27:37.128Z","comments":true,"path":"2018/01/21/Python学习笔记（2）/","link":"","permalink":"https://midoriruka.github.io/2018/01/21/Python学习笔记（2）/","excerpt":"","text":"Python学习笔记（2）Python函数 可以重复调用的代码段，学过其他语言的应该都很清楚 定义格式： 不带参数： def print_hello(): print &quot;hello&quot; 调用： print_hello() 带参数： 。。。（不一一记录，跟其他语言差不多） 带默认参数的： 。。。 不定长参数： def print_args(a,*args): print a for s in args print s return 参数次序可以变： 。。。 python类简介面向对象即class ，类 。一个是类，一个是类实例，通俗讲人类就是一个类，每个人就是一个实例，人类又是哺乳动物，是动物的子类，这就是面向对象中继承的概念。动物会自带一些属性，一些属性相同，但是子类可能有其他特有的属性和方法。 定义用class去定义一个类，如果没有指定父类，默认继承object类。 class Human(object): pass 这样定义了一个类，即Human 类属性所有类都有的，并不是某个实例特有的，是与类绑定的，不是和实例绑定的，比如胎生是人类都有的属性，并不是某个人特有的 class Human(object): taisheng=True 实例属性class Human(object): def __init__(self,name);（构造函数，相当于初始化） self.name=name Human_a=Human(&quot;sijt&quot;)(实例化) name属性 独立于人类，是Human_a这个人特有的 ，与实例绑定的，所以叫实例属性，实例属性相对于每个实例是不一样的 class Human(object): pass Human_a=Human() Human_a.name=&apos;a&apos; Human_b.name=&apos;b&apos; (a的名字和b的名字不一样的，是实例属性) 实例属性可以在实例创建后任意时间设定 一般放在构造函数_ init _里 类方法类方法可以看做一种类属性，第一个参数是self，表示调用这个类方法的实例 class Human(object): def __init__(self,name): self.name=name def walk(self): print self.name+&quot;is walking&quot; human_a = Human(&quot;alan&quot;) human_a.walk() 访问控制将name这个属性设为私有，前面加两个下划线 ，还是想访问的话，加个get接口 class Human(object): def __init__(self,name): self.__name=name def walk(self): print self.name+&quot;is walking&quot; def get_name(self): return self.__name human_a = Human(&quot;alan&quot;) human_a.get_name() human_a.__name 如果想改这个属性，要加set接口 class Human(object): def __init__(self,name): self.__name=name def walk(self): print self.name+&quot;is walking&quot; def get_name(self): return self.__name def set_name(self,name): self.__name=name human_a=Human(&quot;a&quot;) print human_a.set_name(&quot;b&quot;) 这么写并不是画蛇添足，可以保护属性，直接属性外露可能带来意想不到的后果，可以通过加接口的方式加以控制，比如可以控制name的长 class Human(object): def __init__(self,name): self.__name=name def walk(self): print self.name+&quot;is walking&quot; def get_name(self): return self.__name def set_name(self,name): if(len(name&lt;=18)) self.__name=name human_a=Human(&quot;a&quot;) print human_a.set_name(&quot;b&quot;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://midoriruka.github.io/tags/python/"}]}]}